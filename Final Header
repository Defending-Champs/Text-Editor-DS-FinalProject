//--------------------------------------------------------------------Header file-------------------------------------------------------------------------------
#pragma once
#include<iostream>
#include<fstream>
#include<string>
#include<conio.h>
using namespace std;
										
					//-----------------------------------Trie trees ADT-------------------------------------

struct TrieNode
{
	TrieNode* links[26];
	bool flag = false;	
	bool containKey(char);							//checks if the reference trie is present or not
	void put(char, TrieNode*);						//creating reference trie
	TrieNode* get(char);							//to get the next node for traversal
	void setEnd();									//setting flag to true at the end of the word
	bool isEnd();									//checking if the word is completed or not
};

class TrieTree
{
private:
	int sugg_Limit;
	int count;
	int present;
	string* strSuggessions;
public:
	TrieNode* root;
	TrieTree();
	void insert(string);									//Insertion in a trie tree
	void suggestionsRec(TrieNode*, string);					//Recursive function to print suggessions
	void selectWord(string&);								//To select word from given suggessions
	void printAutoSuggestions(TrieNode*, string);			//print suggestions for given string
};



						//-----------------------------------Priority queue ADT-------------------------------------

struct PQ_node
{
	char data;
	int prior;
	PQ_node* next = NULL;
	PQ_node();
};

class P_Queue
{
private:
	PQ_node* head;
public:
	char queueArray[26];
	int priority[26];
	int queueSize;
	P_Queue();										// constructor
	bool IsEmpty();									//Check if queue is empty
	void Insert(char, int);							//inserting element in priority queue list
	void sort(char[], int[]);						//Applying bubble sort algorithim for sorting the queue arr
	void display();									//Function to display the values of Priority queue list
	void get(string, int);				//Function which gets a string,its size and sort by priority and insert in list
};



						//-----------------------------------MinHeap ADT-------------------------------------

struct Mnode
{
	Mnode* left, * right;
	Mnode* next;
	char data;
	int prior;
	Mnode();
};

class MHeap
{
	Mnode* root;
	string* arr;
	int CharNum;
	int size;
public:
	fstream codes, org, encoded;
	MHeap();
	void Insert(P_Queue);										//to insert elements of priority queue in heap
	void Enqueue(Mnode*);
	Mnode* Dequeue();
	void sort();												//Sorting list
	Mnode* system();											//function to implement the process of making huffman tree
	void HuffMan();												//Making tree and decreasing the priority queue
	void Search(Mnode* crr, string, char, string&);				//Function used to find codes for a character
	void FindCode(string&, char);								//Function used to find codes of string alphaets using the above recursive function
	void AssignCodes(P_Queue, string);							//function to assign codes from file to array
	void read();												//Function to decode the text from the file
};
